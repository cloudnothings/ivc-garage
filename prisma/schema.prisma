// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id             Int     @id @default(autoincrement())
  user           User    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail      String  @unique // relation scalar field (used in the `@relation` attribute above)
  displayName    String?
  firstName      String?
  lastName       String?
  allowMentions  Boolean @default(true)
  allowComments  Boolean @default(true)
  privateProfile Boolean @default(false)
  profilePicture String?
  profileBanner  String?
  about          String?
  publicEmail    String?
}

model Car {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail   String     @unique // relation scalar field (used in the `@relation` attribute above)
  primary     Boolean    @default(false)
  nickname    String?
  make        String?
  model       String?
  year        Int?
  color       String?
  image       String?
  description String?
  CarImage    CarImage[]
}

model CarImage {
  id        Int      @id @default(autoincrement())
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     Int // relation scalar field (used in the `@relation` attribute above)
  image     String?
  createdAt DateTime @default(now())
}

model SocialPlatforms {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String  @unique // relation scalar field (used in the `@relation` attribute above)
  twitter   String?
  instagram String?
  linkedin  String?
  github    String?
  youtube   String?
  tiktok    String?
  twitch    String?
  spotify   String?
}

model User {
  id              String           @id @default(cuid())
  name            String?
  slug            String?          @unique @default(cuid())
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  Profile         Profile?
  SocialPlatforms SocialPlatforms?
  Cars            Car[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
